{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useSpeechSynthesis = () => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const speak = useCallback(text => {\n    return new Promise(resolve => {\n      if (!('speechSynthesis' in window)) {\n        console.error('Speech synthesis not supported');\n        resolve();\n        return;\n      }\n\n      // Cancel any ongoing speech\n      speechSynthesis.cancel();\n      setIsSpeaking(true);\n      const utterance = new SpeechSynthesisUtterance(text);\n\n      // Optimized voice settings to match console quality as closely as possible\n      utterance.rate = 0.95;\n      utterance.pitch = 1.0;\n      utterance.volume = 0.9;\n\n      // Enhanced voice selection for better quality female voices\n      const voices = speechSynthesis.getVoices();\n\n      // Priority list of high-quality female voices\n      const preferredVoices = ['Microsoft Zira Desktop - English (United States)', 'Microsoft Zira - English (United States)', 'Google UK English Female', 'Google US English Female', 'Samantha', 'Victoria (Enhanced)', 'Karen', 'Moira', 'Tessa', 'Veena', 'Fiona', 'Alex'];\n      let selectedVoice = null;\n\n      // Try to find the best female voice\n      for (const voiceName of preferredVoices) {\n        selectedVoice = voices.find(voice => voice.name.includes(voiceName) || voice.name.toLowerCase().includes(voiceName.toLowerCase()) || voice.name.toLowerCase().includes('female') && voice.lang.includes('en'));\n        if (selectedVoice) break;\n      }\n\n      // Fallback to any English voice\n      if (!selectedVoice) {\n        selectedVoice = voices.find(voice => voice.lang.includes('en-US') || voice.lang.includes('en-GB') || voice.lang.includes('en'));\n      }\n      if (selectedVoice) {\n        utterance.voice = selectedVoice;\n        console.log('Using voice:', selectedVoice.name, selectedVoice.lang);\n      }\n      utterance.onstart = () => {\n        console.log('Speech synthesis started');\n      };\n      utterance.onend = () => {\n        console.log('Speech synthesis ended');\n        setIsSpeaking(false);\n        resolve();\n      };\n      utterance.onerror = error => {\n        console.error('Speech synthesis error:', error);\n        setIsSpeaking(false);\n        resolve();\n      };\n      speechSynthesis.speak(utterance);\n    });\n  }, []);\n  return {\n    speak,\n    isSpeaking\n  };\n};\n_s(useSpeechSynthesis, \"ZJcOLEtEi2jeHh7MmT3GvoLfmf4=\");","map":{"version":3,"names":["useState","useCallback","useSpeechSynthesis","_s","isSpeaking","setIsSpeaking","speak","text","Promise","resolve","window","console","error","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","voices","getVoices","preferredVoices","selectedVoice","voiceName","find","voice","name","includes","toLowerCase","lang","log","onstart","onend","onerror"],"sources":["/Users/nakai/Documents/apps/friday_jarvis/monday_backend/react_app/src/hooks/useSpeechSynthesis.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nexport const useSpeechSynthesis = () => {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  const speak = useCallback((text) => {\n    return new Promise((resolve) => {\n      if (!('speechSynthesis' in window)) {\n        console.error('Speech synthesis not supported');\n        resolve();\n        return;\n      }\n\n      // Cancel any ongoing speech\n      speechSynthesis.cancel();\n      setIsSpeaking(true);\n\n      const utterance = new SpeechSynthesisUtterance(text);\n      \n      // Optimized voice settings to match console quality as closely as possible\n      utterance.rate = 0.95;\n      utterance.pitch = 1.0;\n      utterance.volume = 0.9;\n\n      // Enhanced voice selection for better quality female voices\n      const voices = speechSynthesis.getVoices();\n      \n      // Priority list of high-quality female voices\n      const preferredVoices = [\n        'Microsoft Zira Desktop - English (United States)',\n        'Microsoft Zira - English (United States)', \n        'Google UK English Female',\n        'Google US English Female',\n        'Samantha',\n        'Victoria (Enhanced)',\n        'Karen',\n        'Moira',\n        'Tessa',\n        'Veena',\n        'Fiona',\n        'Alex'\n      ];\n      \n      let selectedVoice = null;\n      \n      // Try to find the best female voice\n      for (const voiceName of preferredVoices) {\n        selectedVoice = voices.find(voice => \n          voice.name.includes(voiceName) ||\n          voice.name.toLowerCase().includes(voiceName.toLowerCase()) ||\n          (voice.name.toLowerCase().includes('female') && voice.lang.includes('en'))\n        );\n        if (selectedVoice) break;\n      }\n      \n      // Fallback to any English voice\n      if (!selectedVoice) {\n        selectedVoice = voices.find(voice => \n          voice.lang.includes('en-US') || \n          voice.lang.includes('en-GB') ||\n          voice.lang.includes('en')\n        );\n      }\n\n      if (selectedVoice) {\n        utterance.voice = selectedVoice;\n        console.log('Using voice:', selectedVoice.name, selectedVoice.lang);\n      }\n\n      utterance.onstart = () => {\n        console.log('Speech synthesis started');\n      };\n\n      utterance.onend = () => {\n        console.log('Speech synthesis ended');\n        setIsSpeaking(false);\n        resolve();\n      };\n\n      utterance.onerror = (error) => {\n        console.error('Speech synthesis error:', error);\n        setIsSpeaking(false);\n        resolve();\n      };\n\n      speechSynthesis.speak(utterance);\n    });\n  }, []);\n\n  return {\n    speak,\n    isSpeaking\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}