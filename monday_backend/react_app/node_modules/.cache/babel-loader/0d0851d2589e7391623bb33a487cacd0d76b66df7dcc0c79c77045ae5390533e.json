{"ast":null,"code":"var _jsxFileName = \"/Users/nakai/Documents/apps/friday_jarvis/monday_backend/react_app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SoundWave from './components/SoundWave';\nimport { useSpeechRecognition } from './hooks/useSpeechRecognition';\nimport { useSpeechSynthesis } from './hooks/useSpeechSynthesis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [status, setStatus] = useState('idle');\n  const [statusText, setStatusText] = useState('Listening...');\n  const {\n    speak,\n    isSpeaking\n  } = useSpeechSynthesis();\n  const {\n    startListening,\n    stopListening,\n    isListening\n  } = useSpeechRecognition({\n    onResult: handleSpeechResult,\n    onInterim: handleInterimResult\n  });\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Determine the current state for visual feedback\n  const currentState = isProcessing ? 'thinking' : isSpeaking ? 'speaking' : isListening ? 'listening' : 'idle';\n  useEffect(() => {\n    setStatus(currentState);\n    switch (currentState) {\n      case 'idle':\n        setStatusText('Listening...');\n        break;\n      case 'listening':\n        setStatusText('Listening...');\n        break;\n      case 'thinking':\n        setStatusText('Friday is thinking...');\n        break;\n      case 'speaking':\n        setStatusText('Friday is speaking...');\n        break;\n      default:\n        setStatusText('Ready');\n    }\n  }, [currentState]);\n  function handleInterimResult(transcript) {\n    if (!isProcessing && !isSpeaking) {\n      setStatusText(`Listening: ${transcript}`);\n    }\n  }\n  async function handleSpeechResult(transcript) {\n    if (isProcessing || isSpeaking) return;\n    setIsProcessing(true);\n    stopListening();\n    setStatusText(`Heard: ${transcript}`);\n    try {\n      console.log('Sending to Friday:', transcript);\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: transcript\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        await speak(data.response);\n      } else {\n        throw new Error(data.error || 'Failed to get response');\n      }\n    } catch (error) {\n      console.error('Error communicating with Friday:', error);\n      await speak('Apologies, Sir, but I encountered a technical difficulty.');\n    } finally {\n      setIsProcessing(false);\n      // Restart listening after a brief delay\n      setTimeout(() => {\n        startListening();\n      }, 1000);\n    }\n  }\n\n  // Start listening on component mount\n  useEffect(() => {\n    const initializeVoice = async () => {\n      try {\n        // Request microphone permission\n        await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        console.log('Microphone access granted');\n\n        // Start with welcome message\n        setTimeout(async () => {\n          await speak(\"Good day, Sir. I am Friday, your personal assistant. How may I be of service today?\");\n          // Start listening after welcome message\n          setTimeout(() => {\n            startListening();\n          }, 1000);\n        }, 1500);\n      } catch (error) {\n        console.error('Microphone access denied:', error);\n        setStatusText('Please allow microphone access and refresh the page');\n      }\n    };\n    initializeVoice();\n  }, [speak, startListening]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Friday\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sound-wave-container\",\n        children: /*#__PURE__*/_jsxDEV(SoundWave, {\n          state: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-text\",\n        children: statusText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Friday is always listening - just speak naturally\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5qxs5Y/X7iCodFnoTuzl8YYnr0A=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SoundWave","useSpeechRecognition","useSpeechSynthesis","jsxDEV","_jsxDEV","App","_s","status","setStatus","statusText","setStatusText","speak","isSpeaking","startListening","stopListening","isListening","onResult","handleSpeechResult","onInterim","handleInterimResult","isProcessing","setIsProcessing","currentState","transcript","console","log","response","fetch","method","headers","body","JSON","stringify","message","data","json","ok","Error","error","setTimeout","initializeVoice","navigator","mediaDevices","getUserMedia","audio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","state","_c","$RefreshReg$"],"sources":["/Users/nakai/Documents/apps/friday_jarvis/monday_backend/react_app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SoundWave from './components/SoundWave';\nimport { useSpeechRecognition } from './hooks/useSpeechRecognition';\nimport { useSpeechSynthesis } from './hooks/useSpeechSynthesis';\n\nfunction App() {\n  const [status, setStatus] = useState('idle');\n  const [statusText, setStatusText] = useState('Listening...');\n  \n  const { speak, isSpeaking } = useSpeechSynthesis();\n  const { startListening, stopListening, isListening } = useSpeechRecognition({\n    onResult: handleSpeechResult,\n    onInterim: handleInterimResult\n  });\n\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Determine the current state for visual feedback\n  const currentState = isProcessing ? 'thinking' : \n                      isSpeaking ? 'speaking' : \n                      isListening ? 'listening' : 'idle';\n\n  useEffect(() => {\n    setStatus(currentState);\n    \n    switch (currentState) {\n      case 'idle':\n        setStatusText('Listening...');\n        break;\n      case 'listening':\n        setStatusText('Listening...');\n        break;\n      case 'thinking':\n        setStatusText('Friday is thinking...');\n        break;\n      case 'speaking':\n        setStatusText('Friday is speaking...');\n        break;\n      default:\n        setStatusText('Ready');\n    }\n  }, [currentState]);\n\n  function handleInterimResult(transcript) {\n    if (!isProcessing && !isSpeaking) {\n      setStatusText(`Listening: ${transcript}`);\n    }\n  }\n\n  async function handleSpeechResult(transcript) {\n    if (isProcessing || isSpeaking) return;\n    \n    setIsProcessing(true);\n    stopListening();\n    setStatusText(`Heard: ${transcript}`);\n    \n    try {\n      console.log('Sending to Friday:', transcript);\n      \n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: transcript }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        await speak(data.response);\n      } else {\n        throw new Error(data.error || 'Failed to get response');\n      }\n    } catch (error) {\n      console.error('Error communicating with Friday:', error);\n      await speak('Apologies, Sir, but I encountered a technical difficulty.');\n    } finally {\n      setIsProcessing(false);\n      // Restart listening after a brief delay\n      setTimeout(() => {\n        startListening();\n      }, 1000);\n    }\n  }\n\n  // Start listening on component mount\n  useEffect(() => {\n    const initializeVoice = async () => {\n      try {\n        // Request microphone permission\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        console.log('Microphone access granted');\n        \n        // Start with welcome message\n        setTimeout(async () => {\n          await speak(\"Good day, Sir. I am Friday, your personal assistant. How may I be of service today?\");\n          // Start listening after welcome message\n          setTimeout(() => {\n            startListening();\n          }, 1000);\n        }, 1500);\n        \n      } catch (error) {\n        console.error('Microphone access denied:', error);\n        setStatusText('Please allow microphone access and refresh the page');\n      }\n    };\n\n    initializeVoice();\n  }, [speak, startListening]);\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1 className=\"app-title\">Friday</h1>\n      </header>\n      \n      <main className=\"app-main\">\n        <div className=\"sound-wave-container\">\n          <SoundWave state={status} />\n        </div>\n        \n        <div className=\"status-text\">{statusText}</div>\n      </main>\n      \n      <footer className=\"app-footer\">\n        <p>Friday is always listening - just speak naturally</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,kBAAkB,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,MAAM,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,cAAc,CAAC;EAE5D,MAAM;IAAEa,KAAK;IAAEC;EAAW,CAAC,GAAGV,kBAAkB,CAAC,CAAC;EAClD,MAAM;IAAEW,cAAc;IAAEC,aAAa;IAAEC;EAAY,CAAC,GAAGd,oBAAoB,CAAC;IAC1Ee,QAAQ,EAAEC,kBAAkB;IAC5BC,SAAS,EAAEC;EACb,CAAC,CAAC;EAEF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;;EAEvD;EACA,MAAMwB,YAAY,GAAGF,YAAY,GAAG,UAAU,GAC1BR,UAAU,GAAG,UAAU,GACvBG,WAAW,GAAG,WAAW,GAAG,MAAM;EAEtDhB,SAAS,CAAC,MAAM;IACdS,SAAS,CAACc,YAAY,CAAC;IAEvB,QAAQA,YAAY;MAClB,KAAK,MAAM;QACTZ,aAAa,CAAC,cAAc,CAAC;QAC7B;MACF,KAAK,WAAW;QACdA,aAAa,CAAC,cAAc,CAAC;QAC7B;MACF,KAAK,UAAU;QACbA,aAAa,CAAC,uBAAuB,CAAC;QACtC;MACF,KAAK,UAAU;QACbA,aAAa,CAAC,uBAAuB,CAAC;QACtC;MACF;QACEA,aAAa,CAAC,OAAO,CAAC;IAC1B;EACF,CAAC,EAAE,CAACY,YAAY,CAAC,CAAC;EAElB,SAASH,mBAAmBA,CAACI,UAAU,EAAE;IACvC,IAAI,CAACH,YAAY,IAAI,CAACR,UAAU,EAAE;MAChCF,aAAa,CAAC,cAAca,UAAU,EAAE,CAAC;IAC3C;EACF;EAEA,eAAeN,kBAAkBA,CAACM,UAAU,EAAE;IAC5C,IAAIH,YAAY,IAAIR,UAAU,EAAE;IAEhCS,eAAe,CAAC,IAAI,CAAC;IACrBP,aAAa,CAAC,CAAC;IACfJ,aAAa,CAAC,UAAUa,UAAU,EAAE,CAAC;IAErC,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,UAAU,CAAC;MAE7C,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,EAAE;QACxCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAEV;QAAW,CAAC;MAC9C,CAAC,CAAC;MAEF,MAAMW,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAElC,IAAIT,QAAQ,CAACU,EAAE,EAAE;QACf,MAAMzB,KAAK,CAACuB,IAAI,CAACR,QAAQ,CAAC;MAC5B,CAAC,MAAM;QACL,MAAM,IAAIW,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,wBAAwB,CAAC;MACzD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAM3B,KAAK,CAAC,2DAA2D,CAAC;IAC1E,CAAC,SAAS;MACRU,eAAe,CAAC,KAAK,CAAC;MACtB;MACAkB,UAAU,CAAC,MAAM;QACf1B,cAAc,CAAC,CAAC;MAClB,CAAC,EAAE,IAAI,CAAC;IACV;EACF;;EAEA;EACAd,SAAS,CAAC,MAAM;IACd,MAAMyC,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF;QACA,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QAC1DpB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;QAExC;QACAc,UAAU,CAAC,YAAY;UACrB,MAAM5B,KAAK,CAAC,qFAAqF,CAAC;UAClG;UACA4B,UAAU,CAAC,MAAM;YACf1B,cAAc,CAAC,CAAC;UAClB,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,EAAE,IAAI,CAAC;MAEV,CAAC,CAAC,OAAOyB,KAAK,EAAE;QACdd,OAAO,CAACc,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD5B,aAAa,CAAC,qDAAqD,CAAC;MACtE;IACF,CAAC;IAED8B,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAAC7B,KAAK,EAAEE,cAAc,CAAC,CAAC;EAE3B,oBACET,OAAA;IAAKyC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1C,OAAA;MAAQyC,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5B1C,OAAA;QAAIyC,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eAET9C,OAAA;MAAMyC,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACxB1C,OAAA;QAAKyC,SAAS,EAAC,sBAAsB;QAAAC,QAAA,eACnC1C,OAAA,CAACJ,SAAS;UAACmD,KAAK,EAAE5C;QAAO;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eAEN9C,OAAA;QAAKyC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAErC;MAAU;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eAEP9C,OAAA;MAAQyC,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5B1C,OAAA;QAAA0C,QAAA,EAAG;MAAiD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC5C,EAAA,CA9HQD,GAAG;EAAA,QAIoBH,kBAAkB,EACOD,oBAAoB;AAAA;AAAAmD,EAAA,GALpE/C,GAAG;AAgIZ,eAAeA,GAAG;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}