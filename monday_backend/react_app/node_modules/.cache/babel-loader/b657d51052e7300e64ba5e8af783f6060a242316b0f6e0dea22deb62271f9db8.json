{"ast":null,"code":"import{useState,useCallback}from'react';export const useSpeechSynthesis=()=>{const[isSpeaking,setIsSpeaking]=useState(false);const speak=useCallback(text=>{return new Promise(resolve=>{if(!('speechSynthesis'in window)){console.error('Speech synthesis not supported');resolve();return;}// Cancel any ongoing speech\nspeechSynthesis.cancel();setIsSpeaking(true);const utterance=new SpeechSynthesisUtterance(text);// Optimized voice settings to match console quality as closely as possible\nutterance.rate=0.95;utterance.pitch=1.0;utterance.volume=0.9;// Enhanced voice selection for better quality female voices\nconst voices=speechSynthesis.getVoices();// Priority list of high-quality female voices\nconst preferredVoices=['Microsoft Zira Desktop - English (United States)','Microsoft Zira - English (United States)','Google UK English Female','Google US English Female','Samantha','Victoria (Enhanced)','Karen','Moira','Tessa','Veena','Fiona','Alex'];let selectedVoice=null;// Try to find the best female voice\nfor(const voiceName of preferredVoices){selectedVoice=voices.find(voice=>voice.name.includes(voiceName)||voice.name.toLowerCase().includes(voiceName.toLowerCase())||voice.name.toLowerCase().includes('female')&&voice.lang.includes('en'));if(selectedVoice)break;}// Fallback to any English voice\nif(!selectedVoice){selectedVoice=voices.find(voice=>voice.lang.includes('en-US')||voice.lang.includes('en-GB')||voice.lang.includes('en'));}if(selectedVoice){utterance.voice=selectedVoice;console.log('Using voice:',selectedVoice.name,selectedVoice.lang);}utterance.onstart=()=>{console.log('Speech synthesis started');};utterance.onend=()=>{console.log('Speech synthesis ended');setIsSpeaking(false);resolve();};utterance.onerror=error=>{console.error('Speech synthesis error:',error);setIsSpeaking(false);resolve();};speechSynthesis.speak(utterance);});},[]);return{speak,isSpeaking};};","map":{"version":3,"names":["useState","useCallback","useSpeechSynthesis","isSpeaking","setIsSpeaking","speak","text","Promise","resolve","window","console","error","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","voices","getVoices","preferredVoices","selectedVoice","voiceName","find","voice","name","includes","toLowerCase","lang","log","onstart","onend","onerror"],"sources":["/Users/nakai/Documents/apps/friday_jarvis/monday_backend/react_app/src/hooks/useSpeechSynthesis.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nexport const useSpeechSynthesis = () => {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  const speak = useCallback((text) => {\n    return new Promise((resolve) => {\n      if (!('speechSynthesis' in window)) {\n        console.error('Speech synthesis not supported');\n        resolve();\n        return;\n      }\n\n      // Cancel any ongoing speech\n      speechSynthesis.cancel();\n      setIsSpeaking(true);\n\n      const utterance = new SpeechSynthesisUtterance(text);\n      \n      // Optimized voice settings to match console quality as closely as possible\n      utterance.rate = 0.95;\n      utterance.pitch = 1.0;\n      utterance.volume = 0.9;\n\n      // Enhanced voice selection for better quality female voices\n      const voices = speechSynthesis.getVoices();\n      \n      // Priority list of high-quality female voices\n      const preferredVoices = [\n        'Microsoft Zira Desktop - English (United States)',\n        'Microsoft Zira - English (United States)', \n        'Google UK English Female',\n        'Google US English Female',\n        'Samantha',\n        'Victoria (Enhanced)',\n        'Karen',\n        'Moira',\n        'Tessa',\n        'Veena',\n        'Fiona',\n        'Alex'\n      ];\n      \n      let selectedVoice = null;\n      \n      // Try to find the best female voice\n      for (const voiceName of preferredVoices) {\n        selectedVoice = voices.find(voice => \n          voice.name.includes(voiceName) ||\n          voice.name.toLowerCase().includes(voiceName.toLowerCase()) ||\n          (voice.name.toLowerCase().includes('female') && voice.lang.includes('en'))\n        );\n        if (selectedVoice) break;\n      }\n      \n      // Fallback to any English voice\n      if (!selectedVoice) {\n        selectedVoice = voices.find(voice => \n          voice.lang.includes('en-US') || \n          voice.lang.includes('en-GB') ||\n          voice.lang.includes('en')\n        );\n      }\n\n      if (selectedVoice) {\n        utterance.voice = selectedVoice;\n        console.log('Using voice:', selectedVoice.name, selectedVoice.lang);\n      }\n\n      utterance.onstart = () => {\n        console.log('Speech synthesis started');\n      };\n\n      utterance.onend = () => {\n        console.log('Speech synthesis ended');\n        setIsSpeaking(false);\n        resolve();\n      };\n\n      utterance.onerror = (error) => {\n        console.error('Speech synthesis error:', error);\n        setIsSpeaking(false);\n        resolve();\n      };\n\n      speechSynthesis.speak(utterance);\n    });\n  }, []);\n\n  return {\n    speak,\n    isSpeaking\n  };\n};\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAE7C,MAAO,MAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAM,CACtC,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGJ,QAAQ,CAAC,KAAK,CAAC,CAEnD,KAAM,CAAAK,KAAK,CAAGJ,WAAW,CAAEK,IAAI,EAAK,CAClC,MAAO,IAAI,CAAAC,OAAO,CAAEC,OAAO,EAAK,CAC9B,GAAI,EAAE,iBAAiB,EAAI,CAAAC,MAAM,CAAC,CAAE,CAClCC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC,CAC/CH,OAAO,CAAC,CAAC,CACT,OACF,CAEA;AACAI,eAAe,CAACC,MAAM,CAAC,CAAC,CACxBT,aAAa,CAAC,IAAI,CAAC,CAEnB,KAAM,CAAAU,SAAS,CAAG,GAAI,CAAAC,wBAAwB,CAACT,IAAI,CAAC,CAEpD;AACAQ,SAAS,CAACE,IAAI,CAAG,IAAI,CACrBF,SAAS,CAACG,KAAK,CAAG,GAAG,CACrBH,SAAS,CAACI,MAAM,CAAG,GAAG,CAEtB;AACA,KAAM,CAAAC,MAAM,CAAGP,eAAe,CAACQ,SAAS,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAC,eAAe,CAAG,CACtB,kDAAkD,CAClD,0CAA0C,CAC1C,0BAA0B,CAC1B,0BAA0B,CAC1B,UAAU,CACV,qBAAqB,CACrB,OAAO,CACP,OAAO,CACP,OAAO,CACP,OAAO,CACP,OAAO,CACP,MAAM,CACP,CAED,GAAI,CAAAC,aAAa,CAAG,IAAI,CAExB;AACA,IAAK,KAAM,CAAAC,SAAS,GAAI,CAAAF,eAAe,CAAE,CACvCC,aAAa,CAAGH,MAAM,CAACK,IAAI,CAACC,KAAK,EAC/BA,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACJ,SAAS,CAAC,EAC9BE,KAAK,CAACC,IAAI,CAACE,WAAW,CAAC,CAAC,CAACD,QAAQ,CAACJ,SAAS,CAACK,WAAW,CAAC,CAAC,CAAC,EACzDH,KAAK,CAACC,IAAI,CAACE,WAAW,CAAC,CAAC,CAACD,QAAQ,CAAC,QAAQ,CAAC,EAAIF,KAAK,CAACI,IAAI,CAACF,QAAQ,CAAC,IAAI,CAC1E,CAAC,CACD,GAAIL,aAAa,CAAE,MACrB,CAEA;AACA,GAAI,CAACA,aAAa,CAAE,CAClBA,aAAa,CAAGH,MAAM,CAACK,IAAI,CAACC,KAAK,EAC/BA,KAAK,CAACI,IAAI,CAACF,QAAQ,CAAC,OAAO,CAAC,EAC5BF,KAAK,CAACI,IAAI,CAACF,QAAQ,CAAC,OAAO,CAAC,EAC5BF,KAAK,CAACI,IAAI,CAACF,QAAQ,CAAC,IAAI,CAC1B,CAAC,CACH,CAEA,GAAIL,aAAa,CAAE,CACjBR,SAAS,CAACW,KAAK,CAAGH,aAAa,CAC/BZ,OAAO,CAACoB,GAAG,CAAC,cAAc,CAAER,aAAa,CAACI,IAAI,CAAEJ,aAAa,CAACO,IAAI,CAAC,CACrE,CAEAf,SAAS,CAACiB,OAAO,CAAG,IAAM,CACxBrB,OAAO,CAACoB,GAAG,CAAC,0BAA0B,CAAC,CACzC,CAAC,CAEDhB,SAAS,CAACkB,KAAK,CAAG,IAAM,CACtBtB,OAAO,CAACoB,GAAG,CAAC,wBAAwB,CAAC,CACrC1B,aAAa,CAAC,KAAK,CAAC,CACpBI,OAAO,CAAC,CAAC,CACX,CAAC,CAEDM,SAAS,CAACmB,OAAO,CAAItB,KAAK,EAAK,CAC7BD,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/CP,aAAa,CAAC,KAAK,CAAC,CACpBI,OAAO,CAAC,CAAC,CACX,CAAC,CAEDI,eAAe,CAACP,KAAK,CAACS,SAAS,CAAC,CAClC,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACLT,KAAK,CACLF,UACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}