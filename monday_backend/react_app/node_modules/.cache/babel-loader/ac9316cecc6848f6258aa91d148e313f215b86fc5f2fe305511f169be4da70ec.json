{"ast":null,"code":"import{useState,useRef,useCallback}from'react';export const useSpeechRecognition=_ref=>{let{onResult,onInterim}=_ref;const[isListening,setIsListening]=useState(false);const recognitionRef=useRef(null);const startListening=useCallback(()=>{if(!('webkitSpeechRecognition'in window)&&!('SpeechRecognition'in window)){console.error('Speech recognition not supported');return;}if(isListening){console.log('Already listening');return;}const SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;recognitionRef.current=new SpeechRecognition();const recognition=recognitionRef.current;recognition.continuous=true;recognition.interimResults=true;recognition.lang='en-US';recognition.maxAlternatives=1;recognition.onstart=()=>{console.log('Speech recognition started');setIsListening(true);};recognition.onresult=event=>{let finalTranscript='';let interimTranscript='';for(let i=event.resultIndex;i<event.results.length;i++){const transcript=event.results[i][0].transcript;if(event.results[i].isFinal){finalTranscript+=transcript;}else{interimTranscript+=transcript;}}if(finalTranscript.trim()){onResult(finalTranscript.trim());}else if(interimTranscript.trim()){onInterim(interimTranscript.trim());}};recognition.onerror=event=>{console.error('Speech recognition error:',event.error);setIsListening(false);if(event.error!=='not-allowed'){// Auto-restart on most errors (except permission denied)\nsetTimeout(()=>{startListening();},1000);}};recognition.onend=()=>{console.log('Speech recognition ended');setIsListening(false);};try{recognition.start();}catch(error){console.error('Error starting recognition:',error);setIsListening(false);}},[isListening,onResult,onInterim]);const stopListening=useCallback(()=>{if(recognitionRef.current&&isListening){recognitionRef.current.stop();setIsListening(false);}},[isListening]);return{isListening,startListening,stopListening};};","map":{"version":3,"names":["useState","useRef","useCallback","useSpeechRecognition","_ref","onResult","onInterim","isListening","setIsListening","recognitionRef","startListening","window","console","error","log","SpeechRecognition","webkitSpeechRecognition","current","recognition","continuous","interimResults","lang","maxAlternatives","onstart","onresult","event","finalTranscript","interimTranscript","i","resultIndex","results","length","transcript","isFinal","trim","onerror","setTimeout","onend","start","stopListening","stop"],"sources":["/Users/nakai/Documents/apps/friday_jarvis/monday_backend/react_app/src/hooks/useSpeechRecognition.js"],"sourcesContent":["import { useState, useRef, useCallback } from 'react';\n\nexport const useSpeechRecognition = ({ onResult, onInterim }) => {\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n\n  const startListening = useCallback(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      console.error('Speech recognition not supported');\n      return;\n    }\n\n    if (isListening) {\n      console.log('Already listening');\n      return;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n\n    const recognition = recognitionRef.current;\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n    recognition.maxAlternatives = 1;\n\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n      setIsListening(true);\n    };\n\n    recognition.onresult = (event) => {\n      let finalTranscript = '';\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n\n      if (finalTranscript.trim()) {\n        onResult(finalTranscript.trim());\n      } else if (interimTranscript.trim()) {\n        onInterim(interimTranscript.trim());\n      }\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n      setIsListening(false);\n      \n      if (event.error !== 'not-allowed') {\n        // Auto-restart on most errors (except permission denied)\n        setTimeout(() => {\n          startListening();\n        }, 1000);\n      }\n    };\n\n    recognition.onend = () => {\n      console.log('Speech recognition ended');\n      setIsListening(false);\n    };\n\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Error starting recognition:', error);\n      setIsListening(false);\n    }\n  }, [isListening, onResult, onInterim]);\n\n  const stopListening = useCallback(() => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  }, [isListening]);\n\n  return {\n    isListening,\n    startListening,\n    stopListening\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}