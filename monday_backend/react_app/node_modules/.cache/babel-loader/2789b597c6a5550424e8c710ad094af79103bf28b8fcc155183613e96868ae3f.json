{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useCallback } from 'react';\nexport const useSpeechRecognition = ({\n  onResult,\n  onInterim\n}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n  const startListening = useCallback(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      console.error('Speech recognition not supported');\n      return;\n    }\n    if (isListening) {\n      console.log('Already listening');\n      return;\n    }\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n    const recognition = recognitionRef.current;\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n    recognition.maxAlternatives = 1;\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n      setIsListening(true);\n    };\n    recognition.onresult = event => {\n      let finalTranscript = '';\n      let interimTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n      if (finalTranscript.trim()) {\n        onResult(finalTranscript.trim());\n      } else if (interimTranscript.trim()) {\n        onInterim(interimTranscript.trim());\n      }\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n      setIsListening(false);\n      if (event.error !== 'not-allowed') {\n        // Auto-restart on most errors (except permission denied)\n        setTimeout(() => {\n          startListening();\n        }, 1000);\n      }\n    };\n    recognition.onend = () => {\n      console.log('Speech recognition ended');\n      setIsListening(false);\n    };\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Error starting recognition:', error);\n      setIsListening(false);\n    }\n  }, [isListening, onResult, onInterim]);\n  const stopListening = useCallback(() => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  }, [isListening]);\n  return {\n    isListening,\n    startListening,\n    stopListening\n  };\n};\n_s(useSpeechRecognition, \"BUZgl4AekGXM1JNDLTQKJrYyRGQ=\");","map":{"version":3,"names":["useState","useRef","useCallback","useSpeechRecognition","onResult","onInterim","_s","isListening","setIsListening","recognitionRef","startListening","window","console","error","log","SpeechRecognition","webkitSpeechRecognition","current","recognition","continuous","interimResults","lang","maxAlternatives","onstart","onresult","event","finalTranscript","interimTranscript","i","resultIndex","results","length","transcript","isFinal","trim","onerror","setTimeout","onend","start","stopListening","stop"],"sources":["/Users/nakai/Documents/apps/friday_jarvis/monday_backend/react_app/src/hooks/useSpeechRecognition.js"],"sourcesContent":["import { useState, useRef, useCallback } from 'react';\n\nexport const useSpeechRecognition = ({ onResult, onInterim }) => {\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n\n  const startListening = useCallback(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      console.error('Speech recognition not supported');\n      return;\n    }\n\n    if (isListening) {\n      console.log('Already listening');\n      return;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognitionRef.current = new SpeechRecognition();\n\n    const recognition = recognitionRef.current;\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n    recognition.maxAlternatives = 1;\n\n    recognition.onstart = () => {\n      console.log('Speech recognition started');\n      setIsListening(true);\n    };\n\n    recognition.onresult = (event) => {\n      let finalTranscript = '';\n      let interimTranscript = '';\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n\n      if (finalTranscript.trim()) {\n        onResult(finalTranscript.trim());\n      } else if (interimTranscript.trim()) {\n        onInterim(interimTranscript.trim());\n      }\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n      setIsListening(false);\n      \n      if (event.error !== 'not-allowed') {\n        // Auto-restart on most errors (except permission denied)\n        setTimeout(() => {\n          startListening();\n        }, 1000);\n      }\n    };\n\n    recognition.onend = () => {\n      console.log('Speech recognition ended');\n      setIsListening(false);\n    };\n\n    try {\n      recognition.start();\n    } catch (error) {\n      console.error('Error starting recognition:', error);\n      setIsListening(false);\n    }\n  }, [isListening, onResult, onInterim]);\n\n  const stopListening = useCallback(() => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  }, [isListening]);\n\n  return {\n    isListening,\n    startListening,\n    stopListening\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}